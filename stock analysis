import pandas as pd
import quandl
import cufflinks as cf
import plotly as py
from plotly.offline import iplot
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
QUANDL_API_KEY = "Vp1DVM5ZM4hPe5ADNvq5"
quandl.ApiConfig.api_key = QUANDL_API_KEY

def get_stockdata(stock_ticker,start,end):
    stockdata = quandl.get(stock_ticker,
                           start_date = start,
                           end_date = end)
    return stockdata

def returns(stockdata):
    stockdata["Simple Returns"] = stockdata["Close"].pct_change(periods = 1)
    stockdata["Log Returns"] = np.log(stockdata["Close"]/stockdata["Close"].shift(1))
    return stockdata

#Calculating monthly realized volatility and annualizing it 
def realized_volatility(stockdata):
    return np.sqrt(np.sum(stockdata["Log Returns"]**2))

def realized_monthly_vol(stockdata):
    stock_realized_volatility = stockdata.groupby(pd.Grouper(freq = "M")).apply(realized_volatility)
    stock_realized_volatility = stock_realized_volatility*np.sqrt(12)
    return stock_realized_volatility

def stockdata_plot(stock_realized_volatility,stockdata):
    fig,ax = plt.subplots(3,1 , figsize = (15,10))
    ax[0].plot(stockdata["Close"])
    ax[0].set(title = "Stock Time Series", ylabel = "Stock Price")
    ax[1].plot(stockdata["Log Returns"])
    ax[1].set(ylabel = "Log Returns")
    ax[2].plot(stock_realized_volatility)
    ax[2].set(ylabel = "Annualized monthly volatility")
    
#Detecting and plotting outliers
def data_to_identify_outliers(stockdata):
    stockdata_rolling = stockdata["Simple Returns"].rolling(window = 21).agg(["mean","std"])
    stockdata_outliers = stockdata.join(stockdata_rolling)
    return stockdata_outliers

def identify_outliers(row, n_sigmas = 3):
    x = row["Simple Returns"]
    mu = row["mean"]
    sigma = row["std"]
    if (x > mu + 3*sigma) or (x < mu - 3*sigma):
        return 1 
    else: 
        return 0
    
def plot_outliers(stockdata):
    stockdata["Outliers"] = stockdata.apply(identify_outliers, axis =1)
    outliers = stockdata.loc[stockdata["Outliers"] == 1, ["Simple Returns"]]
    fig,ax = plt.subplots()
    ax.plot(stockdata.index,stockdata["Simple Returns"], color = "blue", label = "Normal")
    ax.scatter(outliers.index, outliers["Simple Returns"], color = "red", label = "Outlier")
    ax.set_title("Stock Returns")
    ax.legend(loc = "lower right")

# Technical Analysis
def technical_chart_plot(stockdata):
    stockdata["Volume"] = stockdata["No. of Shares"]
    qf = cf.QuantFig(stockdata)
    qf.add_volume()
    qf.add_sma(periods = 20,column = "Close", color ="red")
    qf.add_sma(periods = 9 , column = "Close", color = "pink")
    fig = qf.iplot(asFigure = True)
    py.offline.plot(fig)

#Markowtiz mean variance portfolio
stocks = ["BSE/BOM500325","BSE/BOM500180","BSE/BOM500010","BSE/BOM500209","BSE/BOM532174",
          "BSE/BOM532540"]
data = get_stockdata(stocks,"2018-1-1","2020-5-5")
close_columns = [col for col in data.columns if "Close" in col]
table = data[close_columns]
table.columns = ["Reliance","HDFC Bank","HDFC","Infosys","ICICI Bank","TCS"]
Returns = table.pct_change()
Returns = Returns.dropna()


def portfolio_annualised_performance(weights, mean_returns, cov_matrix):
    returns = np.sum(mean_returns*weights ) *252
    std = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)
    return std, returns
  
def random_portfolios(num_portfolios, mean_returns, cov_matrix, risk_free_rate):
    results = np.zeros((3,num_portfolios))
    weights_record = []
    for i in range(num_portfolios):
        weights = np.random.random(len(close_columns))
        weights /= np.sum(weights)
        weights_record.append(weights)
        portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, mean_returns, cov_matrix)
        results[0,i] = portfolio_std_dev
        results[1,i] = portfolio_return
        results[2,i] = (portfolio_return - risk_free_rate) / portfolio_std_dev
    return results, weights_record

returns = table.pct_change()
mean_returns = returns.mean()
cov_matrix = returns.cov()
num_portfolios = 25000
risk_free_rate = 0.0597
constraints = ({"type": "eq", "fun": lambda x: np.sum(x) - 1})    
def neg_sharpe_ratio(weights, mean_returns, cov_matrix, risk_free_rate):
    p_var, p_ret = portfolio_annualised_performance(weights, mean_returns, cov_matrix)
    return -(p_ret - risk_free_rate) / p_var

def max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate):
    num_assets = len(mean_returns)
    args = (mean_returns, cov_matrix, risk_free_rate)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0.0,1.0)
    bounds = tuple(bound for asset in range(num_assets))
    result = sco.minimize(neg_sharpe_ratio, num_assets*[1./num_assets,], args=args,
                        method='SLSQP', bounds=bounds, constraints=constraints)
    return result

def efficient_return(mean_returns, cov_matrix, target):
    num_assets = len(mean_returns)
    args = (mean_returns, cov_matrix)

    def portfolio_return(weights):
        return portfolio_annualised_performance(weights, mean_returns, cov_matrix)[1]

    constraints = ({'type': 'eq', 'fun': lambda x: portfolio_return(x) - target},
                   {'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bounds = tuple((0,1) for asset in range(num_assets))
    result = sco.minimize(portfolio_volatility, num_assets*[1./num_assets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)
    return result


def efficient_frontier(mean_returns, cov_matrix, returns_range):
    efficients = []
    for ret in returns_range:
        efficients.append(efficient_return(mean_returns, cov_matrix, ret))
    return efficients

def display_calculated_ef_with_random(mean_returns, cov_matrix, num_portfolios, risk_free_rate):
    results, _ = random_portfolios(num_portfolios,mean_returns, cov_matrix, risk_free_rate)
    
    max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate)
    sdp, rp = portfolio_annualised_performance(max_sharpe['x'], mean_returns, cov_matrix)
    max_sharpe_allocation = pd.DataFrame(max_sharpe.x,index=table.columns,columns=['allocation'])
    max_sharpe_allocation.allocation = [round(i*100,2)for i in max_sharpe_allocation.allocation]
    max_sharpe_allocation = max_sharpe_allocation.T

    min_vol = min_variance(mean_returns, cov_matrix)
    sdp_min, rp_min = portfolio_annualised_performance(min_vol['x'], mean_returns, cov_matrix)
    min_vol_allocation = pd.DataFrame(min_vol.x,index=table.columns,columns=['allocation'])
    min_vol_allocation.allocation = [round(i*100,2)for i in min_vol_allocation.allocation]
    min_vol_allocation = min_vol_allocation.T
    
    print ("-"*80)
    print ("Maximum Sharpe Ratio Portfolio Allocation\n")
    print ("Annualised Return:", round(rp,2))
    print ("Annualised Volatility:", round(sdp,2))
    print ("\n")
    print (max_sharpe_allocation)
    print ("-"*80)
    print ("Minimum Volatility Portfolio Allocation\n")
    print ("Annualised Return:", round(rp_min,2))
    print ("Annualised Volatility:", round(sdp_min,2))
    print ("\n")
    print (min_vol_allocation)
    
    fig = plt.figure(figsize=(20, 10))
    plt.scatter(results[0,:],results[1,:],c=results[2,:],cmap='YlGnBu', marker='o', s=10, alpha=0.3)
    plt.colorbar()
    plt.scatter(sdp,rp,marker='*',color='r',s=500, label='Maximum Sharpe ratio')
    plt.scatter(sdp_min,rp_min,marker='*',color='g',s=500, label='Minimum volatility')

    target = np.linspace(rp_min, 0.32, 50)
    efficient_portfolios = efficient_frontier(mean_returns, cov_matrix, target)
    plt.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='black', label='efficient frontier')
    plt.title('Calculated Portfolio Optimization based on Efficient Frontier')
    plt.xlabel('annualised volatility')
    plt.ylabel('annualised returns')
    plt.legend(labelspacing=0.8)
    plotly_fig = tls.mpl_to_plotly(fig)
    plotly.offline.plot(plotly_fig, filename="efficient frontier2.html")
    


def display_ef_with_selected(mean_returns, cov_matrix, risk_free_rate):
    max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate)
    sdp, rp = portfolio_annualised_performance(max_sharpe['x'], mean_returns, cov_matrix)
    max_sharpe_allocation = pd.DataFrame(max_sharpe.x,index=table.columns,columns=['allocation'])
    max_sharpe_allocation.allocation = [round(i*100,2)for i in max_sharpe_allocation.allocation]
    max_sharpe_allocation = max_sharpe_allocation.T

    min_vol = min_variance(mean_returns, cov_matrix)
    sdp_min, rp_min = portfolio_annualised_performance(min_vol['x'], mean_returns, cov_matrix)
    min_vol_allocation = pd.DataFrame(min_vol.x,index=table.columns,columns=['allocation'])
    min_vol_allocation.allocation = [round(i*100,2)for i in min_vol_allocation.allocation]
    min_vol_allocation = min_vol_allocation.T
    
    an_vol = np.std(returns) * np.sqrt(252)
    an_rt = mean_returns * 252
    
    print ("-"*80)
    print ("Maximum Sharpe Ratio Portfolio Allocation\n")
    print ("Annualised Return:", round(rp,2))
    print ("Annualised Volatility:", round(sdp,2))
    print ("\n")
    print (max_sharpe_allocation)
    print ("-"*80)
    print ("Minimum Volatility Portfolio Allocation\n")
    print ("Annualised Return:", round(rp_min,2))
    print ("Annualised Volatility:", round(sdp_min,2))
    print ("\n")
    print (min_vol_allocation)
    print ("-"*80)
    print ("Individual Stock Returns and Volatility\n")
    for i, txt in enumerate(table.columns):
        print (txt,":","annuaised return",round(an_rt[i],2),", annualised volatility:",round(an_vol[i],2))
    print ("-"*80)
    
    fig, ax = plt.subplots(figsize=(10, 7))
    ax.scatter(an_vol,an_rt,marker='o',s=200)

    for i, txt in enumerate(table.columns):
        ax.annotate(txt, (an_vol[i],an_rt[i]), xytext=(10,0), textcoords='offset points')
    ax.scatter(sdp,rp,marker='*',color='r',s=500, label='Maximum Sharpe ratio')
    ax.scatter(sdp_min,rp_min,marker='*',color='g',s=500, label='Minimum volatility')

    target = np.linspace(rp_min, 0.34, 50)
    efficient_portfolios = efficient_frontier(mean_returns, cov_matrix, target)
    ax.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='black', label='efficient frontier')
    ax.set_title('Portfolio Optimization with Individual Stocks')
    ax.set_xlabel('annualised volatility')
    ax.set_ylabel('annualised returns')
    ax.legend(labelspacing=0.8)
    #plotly_fig = tls.mpl_to_plotly(fig)
    #plotly.offline.plot(plotly_fig, filename="efficient frontier3.html")
 
#1
display_calculated_ef_with_random(mean_returns, cov_matrix, num_portfolios, risk_free_rate)
#2
display_ef_with_selected(mean_returns, cov_matrix, risk_free_rate)

#wiener process
def wiener_process(T, N):
    """
    T: total time
    N: The total number of steps
    """
    W0 = [0]
    dt = T/float(N)
    # simulate the increments by normal random variable generator
    increments = np.random.normal(0, 1*np.sqrt(dt), N)
    W = W0 + list(np.cumsum(increments))
    return W

def plot_wiener_process(T,N,number_sim):
    dt = T/float(N)
    t = np.linspace(0.0, N*dt, N+1)
    fig = plt.figure(figsize=(15,10))
    for i in range(number_sim):
        W = wiener_process(T, N)
        plt.plot(t, W)
        plt.xlabel('time')
        plt.ylabel('Wiener Process')
        plt.grid(True)
    plotly_fig = tls.mpl_to_plotly(fig)
    plotly.offline.plot(plotly_fig)
        
plot_wiener_process(10,1000,10)


#Generalized wiener process and GBM
#T and dt unit is years
def generalized_wiener_process_and_gbm(stock,T,dt,number_sim,flag):
    flag = flag
    mu = (stock["Close"][-1]/stock["Close"][1])** (365.0/len(stock["Close"])) - 1
    sigma = (stock["Close"]/stock["Close"].shift(1)-1)[1:].std()*np.sqrt(252)
    S0 = stock["Close"][-1]
    steps = T/dt
    fig = plt.figure(figsize=(15,10))
    for j in range(number_sim):
        price_path = [S0]
        st = S0
        for i in range(int(steps)):
            if flag == 1:
                st = st + mu*dt + sigma*np.sqrt(dt)*np.random.normal(0,1)
            else:
                st = st*math.exp(((mu-0.5*sigma**2)*dt + sigma*np.sqrt(dt)*np.random.normal(0, 1)))
            price_path.append(st)
        plt.plot(price_path)
    plt.ylabel('stock price',fontsize=15)
    plt.xlabel('Steps',fontsize=15)
    plotly_fig = tls.mpl_to_plotly(fig)
    plotly.offline.plot(plotly_fig)
    
generalized_wiener_process_and_gbm(hdfc,1,0.001,1000,0)

#maturity in /252 days
def mc_euro_options(stock,option_type,strike,maturity,r,num_reps):
    sigma = (stock["Close"]/stock["Close"].shift(1)-1)[1:].std()*np.sqrt(252)
    s0 = stock["Close"][-1]
    payoff_sum = 0
    for j in range(num_reps):
        st = s0
        st = st*math.exp(((r-0.5*sigma**2)*maturity + sigma*np.sqrt(maturity)*np.random.normal(0, 1)))
        if option_type == 'c':
            payoff = max(0,st-strike)
        elif option_type == 'p':
            payoff = max(0,strike-st)
        payoff_sum += payoff
    premium = (payoff_sum/float(num_reps))*math.exp((-r*maturity))
    return premium
mc_euro_options(hdfc,"c",900,4/252,0.04,1000000)

#Exploring yfinance:
def yahoo_finance_option_chain(ticker):
    stock = yf.Ticker(ticker)    
    hist = stock.history()
    ltp = stock.history().tail(1)
    reco = stock.recommendations.tail(15)
    institution_holdings = stock.institutional_holders
    expiry_dates = stock.options    
    option_chain = stock.option_chain(expiry_dates[0])    
    call = option_chain.calls    
    put = option_chain.puts
    return hist,ltp,reco,institution_holdings, expiry_dates , option_chain, call, put
  
apple = yahoo_finance_option_chain("AAPL")
    
class YahooFinance:
    def __init__(self, ticker, result_range='1mo', start=None, end=None, interval='15m', dropna=True):
        """
        Return the stock data of the specified range and interval
        Note - Either Use result_range parameter or use start and end
        Note - Intraday data cannot extend last 60 days
        :param ticker:  Trading Symbol of the stock should correspond with yahoo website
        :param result_range: Valid Ranges "1d","5d","1mo","3mo","6mo","1y","2y","5y","10y","ytd","max"
        :param start: Starting Date
        :param end: End Date
        :param interval:Valid Intervals - Valid intervals: [1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo]
        :return:
        """
        if result_range is None:
            start = int(_time.mktime(_time.strptime(start, '%d-%m-%Y')))
            end = int(_time.mktime(_time.strptime(end, '%d-%m-%Y')))
            # defining a params dict for the parameters to be sent to the API
            params = {'period1': start, 'period2': end, 'interval': interval}

        else:
            params = {'range': result_range, 'interval': interval}

        # sending get request and saving the response as response object
        url = "https://query1.finance.yahoo.com/v8/finance/chart/{}".format(ticker)
        r = requests.get(url=url, params=params)
        data = r.json()
        # Getting data from json
        error = data['chart']['error']
        if error:
            raise ValueError(error['description'])
        self._result = self._parsing_json(data)
        if dropna:
            self._result.dropna(inplace=True)

    @property
    def result(self):
        return self._result

    def _parsing_json(self, data):
        timestamps = data['chart']['result'][0]['timestamp']
        # Formatting date from epoch to local time
        timestamps = [_time.strftime('%a, %d %b %Y %H:%M:%S', _time.localtime(x)) for x in timestamps]
        volumes = data['chart']['result'][0]['indicators']['quote'][0]['volume']
        opens = data['chart']['result'][0]['indicators']['quote'][0]['open']
        opens = self._round_of_list(opens)
        closes = data['chart']['result'][0]['indicators']['quote'][0]['close']
        closes = self._round_of_list(closes)
        lows = data['chart']['result'][0]['indicators']['quote'][0]['low']
        lows = self._round_of_list(lows)
        highs = data['chart']['result'][0]['indicators']['quote'][0]['high']
        highs = self._round_of_list(highs)
        df_dict = {'Open': opens, 'High': highs, 'Low': lows, 'Close': closes, 'Volume': volumes}
        df = pd.DataFrame(df_dict, index=timestamps)
        df.index = pd.to_datetime(df.index)
        return df

    def _round_of_list(self, xlist):
        temp_list = []
        for x in xlist:
            if isinstance(x, float):
                temp_list.append(round(x, 2))
            else:
                temp_list.append(pd.np.nan)
        return temp_list

    def to_csv(self, file_name):
        self.result.to_csv(file_name)
reliance = YahooFinance('RELIANCE.NS', result_range='1mo', interval='15m', dropna='True').result
class SMAVectorBacktester(object):
    def __init__(self,SMA1, SMA2,ticker,start,end):
        self.SMA1 = SMA1
        self.SMA2 = SMA2
        self.results = None
        self.ticker=ticker
        self.start = start
        self.end = end
        self.get_data()

    def get_data(self):
        ''' Retrieves and prepares the data.
        '''
        raw =  quandl.get(self.ticker,
                           start_date = self.start,
                           end_date = self.end)
        raw["price"] = raw["Close"]
        raw['return'] = np.log(raw["price"] / raw["price"].shift(1))
        raw['SMA1'] = raw['price'].rolling(self.SMA1).mean()
        raw['SMA2'] = raw['price'].rolling(self.SMA2).mean()
        self.data = raw
        
    def set_parameters(self, SMA1=None, SMA2=None):
        ''' Updates SMA parameters and resp. time series.
        '''
        if SMA1 is not None:
            self.SMA1 = SMA1
            self.data['SMA1'] = self.data['price'].rolling(
                self.SMA1).mean()
        if SMA2 is not None:
            self.SMA2 = SMA2
            self.data['SMA2'] = self.data['price'].rolling(self.SMA2).mean()

    def run_strategy(self):
        ''' Backtests the trading strategy.
        '''
        data = self.data.copy().dropna()
        data['position'] = np.where(data['SMA1'] > data['SMA2'], 1, -1)
        data['strategy'] = data['position'].shift(1) * data['return']
        data.dropna(inplace=True)
        data['creturns'] = data['return'].cumsum().apply(np.exp)
        data['cstrategy'] = data['strategy'].cumsum().apply(np.exp)
        self.results = data
        # gross performance of the strategy
        aperf = data['cstrategy'].iloc[-1]
        # out-/underperformance of strategy
        operf = aperf - data['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        ''' Plots the cumulative performance of the trading strategy
        compared to the symbol.
        '''
        if self.results is None:
            print('No results to plot yet. Run a strategy.')
        title = 'SMA1=%d, SMA2=%d' % (self.SMA1, self.SMA2)
        self.results[['creturns', 'cstrategy']].plot(title=title,
                                                     figsize=(10, 6))

    def update_and_run(self, SMA):
        ''' Updates SMA parameters and returns negative absolute performance
        (for minimazation algorithm).

        Parameters
        ==========
        SMA: tuple
            SMA parameter tuple
        '''
        self.set_parameters(int(SMA[0]), int(SMA[1]))
        return -self.run_strategy()[0]

    def optimize_parameters(self, SMA1_range, SMA2_range):
        ''' Finds global maximum given the SMA parameter ranges.

        Parameters
        ==========
        SMA1_range, SMA2_range: tuple
            tuples of the form (start, end, step size)
        '''
        opt = brute(self.update_and_run, (SMA1_range, SMA2_range), finish=None)
        return opt, -self.update_and_run(opt)
#Momentum based strategies
class MomVectorBacktester(object):
    def __init__(self, ticker, start, end, amount, tc):
        self.ticker = ticker
        self.start = start
        self.end = end
        self.amount = amount
        self.tc = tc
        self.results = None
        self.get_data()

    def get_data(self):
        ''' Retrieves and prepares the data.
        '''
        raw =  quandl.get(self.ticker,
                           start_date = self.start,
                           end_date = self.end)
        raw['return'] = np.log(raw["Close"] / raw["Close"].shift(1))
        self.data = raw

    def run_strategy(self, momentum=1):
        ''' Backtests the trading strategy.
        '''
        self.momentum = momentum
        data = self.data.copy().dropna()
        data['position'] = np.sign(data['return'].rolling(momentum).mean())
        data['strategy'] = data['position'].shift(1) * data['return']
        # determine when a trade takes place
        data.dropna(inplace=True)
        trades = data['position'].diff().fillna(0) != 0
        # subtract transaction costs from return when trade takes place
        data['strategy'][trades] -= self.tc
        data['creturns'] = self.amount * data['return'].cumsum().apply(np.exp)
        data['cstrategy'] = self.amount * \
            data['strategy'].cumsum().apply(np.exp)
        self.results = data
        # absolute performance of the strategy
        aperf = self.results['cstrategy'].iloc[-1]
        # out-/underperformance of strategy
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        ''' Plots the cumulative performance of the trading strategy
        compared to the symbol.
        '''
        if self.results is None:
            print('No results to plot yet. Run a strategy.')
        title = '%s | TC = %.4f' % (self.ticker, self.tc)
        self.results[['creturns', 'cstrategy']].plot(title=title,
                                                     figsize=(10, 6))

class MRVectorBacktester(MomVectorBacktester):
    def run_strategy(self, SMA, threshold):
        ''' Backtests the trading strategy.
        '''
        data = self.data.copy().dropna()
        data["price"] = data["Close"]
        data['sma'] = data['price'].rolling(SMA).mean()
        data['distance'] = data['price'] - data['sma']
        data.dropna(inplace=True)
        # sell signals
        data['position'] = np.where(data['distance'] > threshold,
                                    -1, np.nan)
        # buy signals
        data['position'] = np.where(data['distance'] < -threshold,
                                    1, data['position'])
        # crossing of current price and SMA (zero distance)
        data['position'] = np.where(data['distance'] *
                                    data['distance'].shift(1) < 0,
                                    0, data['position'])
        data['position'] = data['position'].ffill().fillna(0)
        data['strategy'] = data['position'].shift(1) * data['return']
        # determine when a trade takes place
        trades = data['position'].diff().fillna(0) != 0
        # subtract transaction costs from return when trade takes place
        data['strategy'][trades] -= self.tc
        data['creturns'] = self.amount * \
            data['return'].cumsum().apply(np.exp)
        data['cstrategy'] = self.amount * \
            data['strategy'].cumsum().apply(np.exp)
        self.results = data
        # absolute performance of the strategy
        aperf = self.results['cstrategy'].iloc[-1]
        # out-/underperformance of strategy
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)


if __name__ == '__main__':
    smabt = SMAVectorBacktester(42, 252,"BSE/BOM500325","2010-1-1","2020-1-1")
    print(smabt.run_strategy())
    smabt.set_parameters(SMA1=20, SMA2=100)
    print(smabt.run_strategy())
    print(smabt.optimize_parameters((30, 56, 4), (200, 300, 4)))
    smabt.plot_results()
    mrbt = MRVectorBacktester("BSE/BOM500325",'2010-1-1', '2020-12-31',
                              10000, 0.0)
    print(mrbt.run_strategy(SMA=25, threshold=10))
    mrbt = MRVectorBacktester("BSE/BOM500325",'2010-1-1', '2020-12-31',
                              10000, 0.001)
    print(mrbt.run_strategy(SMA=25, threshold=12.5))
    mrbt = MRVectorBacktester("BSE/BOM500325",'2010-1-1', '2020-12-31',
                              10000, 0.001)
    print(mrbt.run_strategy(SMA=42, threshold=15))
    mombt = MomVectorBacktester("BSE/BOM500180", '2013-1-1', '2020-1-1',
                                10000, 0.0)
    print(mombt.run_strategy(momentum = 3))
    print(mombt.run_strategy(momentum=11))
    mombt = MomVectorBacktester('XAU=', '2010-1-1', '2020-12-31',
                                10000, 0.001)
    print(mombt.run_strategy(momentum=2))
