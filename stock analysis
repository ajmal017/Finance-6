import pandas as pd
import quandl
import cufflinks as cf
import plotly as py
from plotly.offline import iplot
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.seasonal import seasonal_decompose
QUANDL_API_KEY = "Vp1DVM5ZM4hPe5ADNvq5"
quandl.ApiConfig.api_key = QUANDL_API_KEY

def get_stockdata(stock_ticker,start,end):
    stockdata = quandl.get(stock_ticker,
                           start_date = start,
                           end_date = end)
    return stockdata

def returns(stockdata):
    stockdata["Simple Returns"] = stockdata["Close"].pct_change(periods = 1)
    stockdata["Log Returns"] = np.log(stockdata["Close"]/stockdata["Close"].shift(1))
    return stockdata

#Calculating monthly realized volatility and annualizing it 
def realized_volatility(stockdata):
    return np.sqrt(np.sum(stockdata["Log Returns"]**2))

def realized_monthly_vol(stockdata):
    stock_realized_volatility = stockdata.groupby(pd.Grouper(freq = "M")).apply(realized_volatility)
    stock_realized_volatility = stock_realized_volatility*np.sqrt(12)
    return stock_realized_volatility

def stockdata_plot(stock_realized_volatility,stockdata):
    fig,ax = plt.subplots(3,1 , figsize = (15,10))
    ax[0].plot(stockdata["Close"])
    ax[0].set(title = "Stock Time Series", ylabel = "Stock Price")
    ax[1].plot(stockdata["Log Returns"])
    ax[1].set(ylabel = "Log Returns")
    ax[2].plot(stock_realized_volatility)
    ax[2].set(ylabel = "Annualized monthly volatility")
    
#Detecting and plotting outliers
def data_to_identify_outliers(stockdata):
    stockdata_rolling = stockdata["Simple Returns"].rolling(window = 21).agg(["mean","std"])
    stockdata_outliers = stockdata.join(stockdata_rolling)
    return stockdata_outliers

def identify_outliers(row, n_sigmas = 3):
    x = row["Simple Returns"]
    mu = row["mean"]
    sigma = row["std"]
    if (x > mu + 3*sigma) or (x < mu - 3*sigma):
        return 1 
    else: 
        return 0
    
def plot_outliers(stockdata):
    stockdata["Outliers"] = stockdata.apply(identify_outliers, axis =1)
    outliers = stockdata.loc[stockdata["Outliers"] == 1, ["Simple Returns"]]
    fig,ax = plt.subplots()
    ax.plot(stockdata.index,stockdata["Simple Returns"], color = "blue", label = "Normal")
    ax.scatter(outliers.index, outliers["Simple Returns"], color = "red", label = "Outlier")
    ax.set_title("Stock Returns")
    ax.legend(loc = "lower right")

# Technical Analysis
def technical_chart_plot(stockdata):
    stockdata["Volume"] = stockdata["No. of Shares"]
    qf = cf.QuantFig(stockdata)
    qf.add_volume()
    qf.add_sma(periods = 20,column = "Close", color ="red")
    qf.add_sma(periods = 9 , column = "Close", color = "pink")
    fig = qf.iplot(asFigure = True)
    py.offline.plot(fig)

#Markowtiz mean variance portfolio
stocks = ["BSE/BOM500325","BSE/BOM500180","BSE/BOM500010","BSE/BOM500209","BSE/BOM532174",
          "BSE/BOM532540"]
data = get_stockdata(stocks,"2018-1-1","2020-5-5")
close_columns = [col for col in data.columns if "Close" in col]
table = data[close_columns]
table.columns = ["Reliance","HDFC Bank","HDFC","Infosys","ICICI Bank","TCS"]
Returns = table.pct_change()
Returns = Returns.dropna()


def portfolio_annualised_performance(weights, mean_returns, cov_matrix):
    returns = np.sum(mean_returns*weights ) *252
    std = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)
    return std, returns
  
def random_portfolios(num_portfolios, mean_returns, cov_matrix, risk_free_rate):
    results = np.zeros((3,num_portfolios))
    weights_record = []
    for i in range(num_portfolios):
        weights = np.random.random(len(close_columns))
        weights /= np.sum(weights)
        weights_record.append(weights)
        portfolio_std_dev, portfolio_return = portfolio_annualised_performance(weights, mean_returns, cov_matrix)
        results[0,i] = portfolio_std_dev
        results[1,i] = portfolio_return
        results[2,i] = (portfolio_return - risk_free_rate) / portfolio_std_dev
    return results, weights_record

returns = table.pct_change()
mean_returns = returns.mean()
cov_matrix = returns.cov()
num_portfolios = 25000
risk_free_rate = 0.0597
constraints = ({"type": "eq", "fun": lambda x: np.sum(x) - 1})    
def neg_sharpe_ratio(weights, mean_returns, cov_matrix, risk_free_rate):
    p_var, p_ret = portfolio_annualised_performance(weights, mean_returns, cov_matrix)
    return -(p_ret - risk_free_rate) / p_var

def max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate):
    num_assets = len(mean_returns)
    args = (mean_returns, cov_matrix, risk_free_rate)
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bound = (0.0,1.0)
    bounds = tuple(bound for asset in range(num_assets))
    result = sco.minimize(neg_sharpe_ratio, num_assets*[1./num_assets,], args=args,
                        method='SLSQP', bounds=bounds, constraints=constraints)
    return result

def efficient_return(mean_returns, cov_matrix, target):
    num_assets = len(mean_returns)
    args = (mean_returns, cov_matrix)

    def portfolio_return(weights):
        return portfolio_annualised_performance(weights, mean_returns, cov_matrix)[1]

    constraints = ({'type': 'eq', 'fun': lambda x: portfolio_return(x) - target},
                   {'type': 'eq', 'fun': lambda x: np.sum(x) - 1})
    bounds = tuple((0,1) for asset in range(num_assets))
    result = sco.minimize(portfolio_volatility, num_assets*[1./num_assets,], args=args, method='SLSQP', bounds=bounds, constraints=constraints)
    return result


def efficient_frontier(mean_returns, cov_matrix, returns_range):
    efficients = []
    for ret in returns_range:
        efficients.append(efficient_return(mean_returns, cov_matrix, ret))
    return efficients

def display_calculated_ef_with_random(mean_returns, cov_matrix, num_portfolios, risk_free_rate):
    results, _ = random_portfolios(num_portfolios,mean_returns, cov_matrix, risk_free_rate)
    
    max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate)
    sdp, rp = portfolio_annualised_performance(max_sharpe['x'], mean_returns, cov_matrix)
    max_sharpe_allocation = pd.DataFrame(max_sharpe.x,index=table.columns,columns=['allocation'])
    max_sharpe_allocation.allocation = [round(i*100,2)for i in max_sharpe_allocation.allocation]
    max_sharpe_allocation = max_sharpe_allocation.T

    min_vol = min_variance(mean_returns, cov_matrix)
    sdp_min, rp_min = portfolio_annualised_performance(min_vol['x'], mean_returns, cov_matrix)
    min_vol_allocation = pd.DataFrame(min_vol.x,index=table.columns,columns=['allocation'])
    min_vol_allocation.allocation = [round(i*100,2)for i in min_vol_allocation.allocation]
    min_vol_allocation = min_vol_allocation.T
    
    print ("-"*80)
    print ("Maximum Sharpe Ratio Portfolio Allocation\n")
    print ("Annualised Return:", round(rp,2))
    print ("Annualised Volatility:", round(sdp,2))
    print ("\n")
    print (max_sharpe_allocation)
    print ("-"*80)
    print ("Minimum Volatility Portfolio Allocation\n")
    print ("Annualised Return:", round(rp_min,2))
    print ("Annualised Volatility:", round(sdp_min,2))
    print ("\n")
    print (min_vol_allocation)
    
    fig = plt.figure(figsize=(20, 10))
    plt.scatter(results[0,:],results[1,:],c=results[2,:],cmap='YlGnBu', marker='o', s=10, alpha=0.3)
    plt.colorbar()
    plt.scatter(sdp,rp,marker='*',color='r',s=500, label='Maximum Sharpe ratio')
    plt.scatter(sdp_min,rp_min,marker='*',color='g',s=500, label='Minimum volatility')

    target = np.linspace(rp_min, 0.32, 50)
    efficient_portfolios = efficient_frontier(mean_returns, cov_matrix, target)
    plt.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='black', label='efficient frontier')
    plt.title('Calculated Portfolio Optimization based on Efficient Frontier')
    plt.xlabel('annualised volatility')
    plt.ylabel('annualised returns')
    plt.legend(labelspacing=0.8)
    plotly_fig = tls.mpl_to_plotly(fig)
    plotly.offline.plot(plotly_fig, filename="efficient frontier2.html")
    


def display_ef_with_selected(mean_returns, cov_matrix, risk_free_rate):
    max_sharpe = max_sharpe_ratio(mean_returns, cov_matrix, risk_free_rate)
    sdp, rp = portfolio_annualised_performance(max_sharpe['x'], mean_returns, cov_matrix)
    max_sharpe_allocation = pd.DataFrame(max_sharpe.x,index=table.columns,columns=['allocation'])
    max_sharpe_allocation.allocation = [round(i*100,2)for i in max_sharpe_allocation.allocation]
    max_sharpe_allocation = max_sharpe_allocation.T

    min_vol = min_variance(mean_returns, cov_matrix)
    sdp_min, rp_min = portfolio_annualised_performance(min_vol['x'], mean_returns, cov_matrix)
    min_vol_allocation = pd.DataFrame(min_vol.x,index=table.columns,columns=['allocation'])
    min_vol_allocation.allocation = [round(i*100,2)for i in min_vol_allocation.allocation]
    min_vol_allocation = min_vol_allocation.T
    
    an_vol = np.std(returns) * np.sqrt(252)
    an_rt = mean_returns * 252
    
    print ("-"*80)
    print ("Maximum Sharpe Ratio Portfolio Allocation\n")
    print ("Annualised Return:", round(rp,2))
    print ("Annualised Volatility:", round(sdp,2))
    print ("\n")
    print (max_sharpe_allocation)
    print ("-"*80)
    print ("Minimum Volatility Portfolio Allocation\n")
    print ("Annualised Return:", round(rp_min,2))
    print ("Annualised Volatility:", round(sdp_min,2))
    print ("\n")
    print (min_vol_allocation)
    print ("-"*80)
    print ("Individual Stock Returns and Volatility\n")
    for i, txt in enumerate(table.columns):
        print (txt,":","annuaised return",round(an_rt[i],2),", annualised volatility:",round(an_vol[i],2))
    print ("-"*80)
    
    fig, ax = plt.subplots(figsize=(10, 7))
    ax.scatter(an_vol,an_rt,marker='o',s=200)

    for i, txt in enumerate(table.columns):
        ax.annotate(txt, (an_vol[i],an_rt[i]), xytext=(10,0), textcoords='offset points')
    ax.scatter(sdp,rp,marker='*',color='r',s=500, label='Maximum Sharpe ratio')
    ax.scatter(sdp_min,rp_min,marker='*',color='g',s=500, label='Minimum volatility')

    target = np.linspace(rp_min, 0.34, 50)
    efficient_portfolios = efficient_frontier(mean_returns, cov_matrix, target)
    ax.plot([p['fun'] for p in efficient_portfolios], target, linestyle='-.', color='black', label='efficient frontier')
    ax.set_title('Portfolio Optimization with Individual Stocks')
    ax.set_xlabel('annualised volatility')
    ax.set_ylabel('annualised returns')
    ax.legend(labelspacing=0.8)
    #plotly_fig = tls.mpl_to_plotly(fig)
    #plotly.offline.plot(plotly_fig, filename="efficient frontier3.html")
 
#1
display_calculated_ef_with_random(mean_returns, cov_matrix, num_portfolios, risk_free_rate)
#2
display_ef_with_selected(mean_returns, cov_matrix, risk_free_rate)
